Time complexity is O(h), memory complexity O(h) as recursive calls will be stored in stack with the max length of tree height. In worst of the worst cases, both would be O(n), where BST somehow ended up being a linked list.
Algorithm removes node with key value from the tree and returns root of the tree with removed node and which was normalised after removal to remain BST. First it uses binary search principle and recursive calls to find node with key value. After that, algorithm considers how many children given node has.
In cases where there are no children, algorithm returns null to recursive call. If only one child, this child is returned. Most complicated case is when node has 2 children. In this case, algorithm searches for the node with the smallest element of the right subtree, puts value of this node into node that should be removed. After that, node which value was taken will be removed as well via recursive call with root.right and root.val as parameters, this will return right subtree with removed node and with all BST properties.