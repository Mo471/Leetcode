Time complexity is O(n), memory complexity O(n) as in worse case it will be needed to store all values of tree.
Tree shall be traversed in-order though it does not really matter for this problem. Each root.val used to calculate increment, i.e. increment = value k - root.val. After that increment is searched in set. If value is missing from set, root.val will be added to the set, and traversal will continue.
If increment was found, it is safe to return true and stop recursive calls. Otherwise, if all calls are finished and increment was not found, it is safe to return false as there are no 2 values that would in sum give value k.